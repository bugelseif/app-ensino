[
    {
      "context": "A estrutura de repetição \"while\" é uma ferramenta fundamental na programação que permite controlar a repetição de um bloco de código enquanto uma condição específica seja verdadeira. É amplamente utilizada quando não se sabe o número exato de iterações antecipadamente, mas deseja-se continuar repetindo um conjunto de ações até que a condição não seja mais atendida. Por exemplo, em um código Java, a estrutura \"while\" pode ser empregada para ler e processar informações de um arquivo linha por linha, continuando até que todo o arquivo tenha sido processado ou até que uma condição de parada seja alcançada. O \"while\" desempenha um papel essencial na automação de tarefas repetitivas e na melhoria da eficiência do código, especialmente quando a quantidade de iterações é desconhecida a priori.",
      "question": "Qual é a finalidade da estrutura de repetição \"while\" em Java?",
      "options": [
        "Para declarar variáveis dentro de um loop.",
        "Para executar um bloco de código repetidamente enquanto uma condição for verdadeira.",
        "Para criar funções personalizadas em Java.",
        "Para interromper a execução do programa imediatamente."
      ],
      "correctAnswer": "Para executar um bloco de código repetidamente enquanto uma condição for verdadeira.",
      "explanation": "A alternativa B está correta porque descreve com precisão a função da estrutura de repetição 'while' em Java. O 'while' é usado para executar um bloco de código repetidamente enquanto uma condição específica for verdadeira. Isso permite a criação de loops que continuam a rodar até que a condição seja avaliada como falsa, oferecendo um controle flexível sobre a repetição de tarefas. As outras alternativas estão erradas porque não representam corretamente a finalidade do 'while' em Java: a alternativa A se refere à declaração de variáveis, a C menciona funções personalizadas (que não são específicas do 'while'), e a D fala sobre interromper a execução do programa, o que não é o objetivo do 'while'."
    },
    {
      "context": "Escolher entre 'for' e 'while' em programação muitas vezes se resume a determinar a natureza da tarefa em questão. O 'for' é apropriado quando você sabe o número de iterações com antecedência, tornando-o ideal para tarefas de contagem previsível. Enquanto isso, o 'while' é preferível quando o número de iterações é incerto e depende de uma condição que pode mudar durante a execução. A escolha entre as duas estruturas deve ser guiada pelas demandas do problema, eficiência e clareza do código, garantindo que a estrutura selecionada melhor atenda às necessidades específicas da tarefa.",
      "question": "Sobre os cenários a seguir, escolha qual seria a estrutura de repetição ideal a ser utilizada.\nCenário 1: Implementar um temporizador que conta de 1 até N e executa uma ação quando atinge N.\nCenário 2: Leitura de entrada do usuário até que um valor específico seja fornecido (por exemplo, até que o usuário digite 'fim').\nCenário 3: Executar uma tarefa repetidamente enquanto a temperatura de um sensor permanecer abaixo de um limite.\nCenário 4: Simular um jogo onde um dado é lançado até que um número específico seja obtido.\n",
      "options": [
        "While, For, For, While",
        "While, While, For, For",
        "For, While, While, While",
        "For, While, For, For"
      ],
      "correctAnswer": "For, While, While, While",
      "explanation": "A resposta correta é \"For, While, While, While\" devido à natureza dos cenários: o primeiro envolve um número conhecido de iterações (\"for\"), o segundo requer leitura contínua até que um critério seja atendido (\"while\"), o terceiro implica execução contínua enquanto uma condição persiste (\"while\"), e o quarto pressupõe lançamentos de dados indeterminados até um resultado específico (\"while\"). Cada cenário se beneficia mais da estrutura de repetição correspondente."
    }
  ]